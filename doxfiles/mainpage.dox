/** \mainpage exprTest
<B>WHAT THIS IS:</B>
	<ul>
		<li>Exprtest is a program based off of a design from the design patterns book (the gang of four one).</li>
		<li>Currently this program has two modes of operaton:</li>
		<ul>
			<li>Calculator mode: calculates boolean formulas using the supported operators</li>
			<li>Proof mode: proves a propositional argument or provides a counter argument</li>
		</ul>
	<li>This program was written and tested on linux I cannot vouch for whether or not it will run on windows</li>
	<li>Input can be done in three ways:</li>
		<ul>
			<li>via the here document generator tool in the proofTranslator and calcTranslator directories
			<ul>
				<li>type out the well formed formulas and specify when you are entering the conlusion via the prompts </li>
			</ul>
			<li>via the built in repl in the "main" binary</li>
				<ul>
					<li>Start with specifying a unary or binary proposition</li>
						<ul>
							<li>For unary:</li>
							<ul>
								<li>it can be a variable or the negation of a formula</li>
							</ul>
						</ul>
						<ul>
							<li>For binary:</li>
							<ul>
								<li>Pick between conditional, and, or or formulas</li>
								<li>arguments get filled in from left to right</li>
							</ul>
						</ul>
				</ul>
		<li>via automating the repl by hand using a here document</li>
			<ul>
				<li>type out the correct sequence of arguments that you would type into the repl</li>
				<li>I did not invent this method of input but I found it very useful during testing</li>
				<li>all 60 test arguments use this method see the first example in the valid arguments directory</li>
			</ul>
		</ul>
	</ul>

<B>Well Formed Formulas:</B>
	<ul>
		<li>All formulas except negations and single variables are parenthesized</li>
		<li>If you use the here doc generator you must use single letter upper case variables</li>
			<ul><li>you should do this for the repl or hand written here docs but you don't have to</li></ul>
		<li>For general propositions @ and # the supported formulas are</li>
			<ul>
				<li>'(#v@)'	for or expressions</li>
				<li>'(#&@)' for and expressions</li>
				<li>'(#->@)' for conditional expressions</li>
				<li>'~@' for not expressions</li>
				<li>'#' for single variables</li>
				<li>'#' and '@' can be any of the expression types above</li>
				<li>For Example ~((AvB)&~~(~C->~D)) is a well formed formula</li>
			</ul>
	</ul>

<B>The Inference Rules:</B>
	<ul>
		<li>{(AvB), ~A |- B} for v's</li>
		<li>{(A&B) |- A, B} for &'s</li>
		<li>{(A->B), A |- B} for ->'s (modus ponens)</li>
		<li>{(A->B), ~B |- ~A} for ->'s (modus tollens)</li>
		<li>{~~A |- A} for double negation</li>
		<li>{~(AvB) |- ~A, ~B} for negated v's</li>
		<li>{~(A&B), A |- ~B} for negated &'s</li>
		<li>{~(A->B) |- A, ~B} for negated ->'s</li>
	</ul>

<B>Inference Rules and Proofs:</B>
	<ul>
		<li>Inference rules are listed to the right of the line to which they apply in '{}' brackets.</li>
		<li>Each inference rule used in a proof specifies also the lines used to make the inference.</li>
		<li>I use the turnstile 'A |- B' to mean from the general formula A the formula B is inferred</li>
		<li>each inference rule listed uses A,B as general formulas, do not confuse these with the specific letters/variables you choose to use in your proof.</li>
		<li>Every proof is done by contradiction if possible, periodically the prover checks for a counterargument this way so long as a counterargument or proof exists my prover will find it (given enough time and memory)</li>
		<li>the prover can also make assumptions for proofs that require them, this is done periodically similar to the counterargument checks if needed.</li>
		<li>this proof method is heavily based off the system used in Harry Genslers intro to logic book which I thought was cool (obviously)</li>
	</ul>

<B>MISC:</B>
	<ul>
		<li>to build the program run the command "make all"</li>
		<li>after you build the program I have created a set of test proofs under the invalidproofs and validproofs directories just do ./prooftxtfile to run them if necessary you may need to give the file execute permissions</li>
		<li>to use the proof translator after building the program go into the proofTranslator directory run the program translator and follow the prompts after you are done a file will have been created in that directory for you to run as explaine above (you may need to give this file execute permissions too)</li>
	</ul>
*/
